#!/usr/bin/env ruby
# encoding: utf-8
#
# Copyright (C) 2011-2013 Neil Stockbridge
# License: GPLv2
#
# This runs on the server that is being monitored.  It is invoked over SSH and
# the Sentinel communicates with it using stdin and stdout.
#

# Determine where the configuration file and the plugins should be found
BIN_DIR = File.dirname __FILE__
TESTING = BIN_DIR != "/usr/bin"
if TESTING
  BASE = BIN_DIR
  CONFIG_FILE = File.join BIN_DIR, "host-api.yml"
  LOG_FILE = "/tmp/host-api.log"
  LOG_INFO = true
else
  BASE = "/usr/share/host-api"
  CONFIG_FILE = "/etc/host-api.yml"
  LOG_FILE = "/var/log/host-api/%s.log"% ENV["USER"]
  LOG_INFO = false
end
$LOAD_PATH.concat [ BASE, File.join(BASE,"plugins")]


require "yaml"
require "json_rpc"



class Exception

  def info
    "%s\n\t%s" % [ message, backtrace.join("\n\t")]
  end

end


def log message
  File.open LOG_FILE, "a" do |f|
    f.puts "  %s  %s"% [Time.now.strftime("%F %T"), message]
  end
end


class Session

  # MODULE_IN_SPACE is a map from namespace[String] to the plugin[Module] that
  # provides methods in the namespace
  MODULE_IN_SPACE = {}

  # PARAMS_OF_METHOD is a map from fully-qualified method name ( namespace,
  # separator, method_name) to a list of the ( named) parameters of the method
  PARAMS_OF_METHOD = {}

  def hold
    begin
      conf = YAML.load File.read CONFIG_FILE
      conf["plugins"].each do |plugin_name|
        #log "loading #{plugin_name}"
        require plugin_name
        #log "loaded"
        plugin = eval camelize( plugin_name)
        MODULE_IN_SPACE[ plugin::NAMESPACE] = plugin
        plugin::PARAMS_OF_METHOD.each_pair do |method_name, params|
          PARAMS_OF_METHOD[ plugin::NAMESPACE+"/#{method_name}"] = params
        end
      end
      loop do
        request_as_json = gets
        break if request_as_json.nil? # happens when the client closes the link
        log "> #{request_as_json}" if LOG_INFO
        response_as_json = rpc_response_to  request_as_json
        log  response_as_json if LOG_INFO
        puts  response_as_json
      end
    rescue Exception => e   # `Exception` includes `LoadError` from `require`
      log "ERROR: "+ e.info
    end
  end


  include JsonRpc::Endpoint

  def rpc_params_of namespace_and_method
    PARAMS_OF_METHOD[ namespace_and_method]
  end

  def rpc_invoke namespace_and_method, params
    begin
      namespace, slash, method_name = namespace_and_method.rpartition "/"
      MODULE_IN_SPACE[ namespace].send  method_name, *params
    rescue JsonRpc::Error => e
      raise e
    rescue StandardError => e
      log "ERROR: "+ e.info
      raise JsonRpc::Error.new -32603, "Internal error"
    end
  end

 private

  def camelize string
    string.capitalize.gsub(/_./) {|match| match.slice(1,1).upcase }
  end

end # of Session


Session.new.hold()

